name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  YARN_VERSION: "1.22.22"

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Lint frontend
        run: |
          npm run lint --workspace=apps/frontend

      - name: Type check frontend
        run: |
          npm run typecheck --workspace=apps/frontend

      - name: Auto-fix formatting and check
        run: |
          npm run fm:fix --workspace=apps/frontend || true
          echo "Formatting issues auto-fixed"

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Build backend
        run: |
          npm run build --workspace=apps/backend

      - name: Build frontend
        run: |
          npm run build --workspace=apps/frontend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/backend/dist/
            apps/frontend/.next/
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Run unit tests (if available)
        run: |
          echo "✅ Unit tests placeholder - add actual tests when ready"
          echo "Backend test command would be: npm run test --workspace=apps/backend"
          echo "Frontend test command would be: npm run test --workspace=apps/frontend"
          echo "Skipping MongoDB integration tests - production DB is secured"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: [build, test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create deployment backup
        run: |
          # Create backup directory with timestamp
          BACKUP_DIR="/var/backups/fsa-$(date +%Y%m%d-%H%M%S)"
          sudo mkdir -p $BACKUP_DIR

          # Backup current deployment (app directory, not runner)
          if [ -d "/var/www/progressnet.io-app" ]; then
            sudo cp -r /var/www/progressnet.io-app $BACKUP_DIR/
            echo "📦 Backup created at $BACKUP_DIR"

            # Special backup of uploads directory with extra safety
            if [ -d "/var/www/progressnet.io-app/apps/backend/uploads" ]; then
              sudo cp -r /var/www/progressnet.io-app/apps/backend/uploads $BACKUP_DIR/uploads-only
              echo "🔒 Extra uploads backup created at $BACKUP_DIR/uploads-only"
            fi
          fi

          # Keep only last 5 backups
          sudo find /var/backups -name "fsa-*" -type d | sort -r | tail -n +6 | sudo xargs rm -rf

      - name: Deploy application
        run: |
          # Create deployment directory (separate from runner directory)
          sudo mkdir -p /var/www/progressnet.io-app-new
          sudo chown -R $USER:$USER /var/www/progressnet.io-app-new

          # Copy application files from current working directory (GitHub runner workspace)
          cp -r . /var/www/progressnet.io-app-new/
          rm -rf /var/www/progressnet.io-app-new/node_modules
          rm -rf /var/www/progressnet.io-app-new/.git
          rm -rf /var/www/progressnet.io-app-new/.next/cache

          # 🔒 SETUP PERSISTENT FILE STORAGE
          PERSISTENT_STORAGE="/var/lib/fsa-uploads"

          # Ensure persistent storage directory exists with proper permissions
          sudo mkdir -p "$PERSISTENT_STORAGE"
          sudo chown -R $USER:www-data "$PERSISTENT_STORAGE"
          sudo chmod -R 775 "$PERSISTENT_STORAGE"

          echo "📁 Setting up persistent uploads storage..."

          # ONE-TIME MIGRATION: Move uploads from old deployment to persistent storage if needed
          if [ -d "/var/www/progressnet.io-app/apps/backend/uploads" ] && [ ! -L "/var/www/progressnet.io-app/apps/backend/uploads" ]; then
            echo "🔄 Found old uploads directory (not a symlink) - migrating to persistent storage..."
            sudo cp -rn /var/www/progressnet.io-app/apps/backend/uploads/* "$PERSISTENT_STORAGE/" 2>/dev/null || true
            echo "✅ Old uploads migrated to persistent storage"
          fi

          # Count files in persistent storage for verification
          UPLOAD_COUNT=$(sudo find "$PERSISTENT_STORAGE" -type f 2>/dev/null | wc -l)
          echo "📊 Persistent storage contains $UPLOAD_COUNT files"

          # Remove any uploads directory that was copied from git repo
          rm -rf /var/www/progressnet.io-app-new/apps/backend/uploads

          # Create symlink in new deployment to persistent storage
          mkdir -p /var/www/progressnet.io-app-new/apps/backend
          ln -sf "$PERSISTENT_STORAGE" /var/www/progressnet.io-app-new/apps/backend/uploads
          echo "✅ Uploads symlinked: /var/www/progressnet.io-app-new/apps/backend/uploads -> $PERSISTENT_STORAGE"

          # Verify symlink
          if [ -L "/var/www/progressnet.io-app-new/apps/backend/uploads" ]; then
            echo "✅ Symlink verified successfully"
            ls -lah /var/www/progressnet.io-app-new/apps/backend/uploads
          else
            echo "❌ ERROR: Symlink creation failed!"
            exit 1
          fi

      - name: Install dependencies and setup
        run: |
          cd /var/www/progressnet.io-app-new

          # Remove any existing build directories to avoid conflicts
          rm -rf apps/backend/dist apps/frontend/.next

          # Note: Build artifacts should already be present from GitHub Actions upload
          # They get downloaded to the current directory by the download-artifact action

          # Install only production dependencies
          yarn install --production --frozen-lockfile


          # Create environment files from secrets (using cat with EOF to handle special characters)
          # Debug: Check current directory and structure
          echo "Current directory: $(pwd)"
          echo "Directory structure:"
          ls -la
          echo "Apps directory:"
          ls -la apps/ || echo "Apps directory not found - creating it"

          # Ensure directories exist
          mkdir -p apps/backend apps/frontend

          echo "Creating backend .env file..."
          cat > apps/backend/.env << "EOF"
          ${{ secrets.ENV_BACK }}
          EOF

          echo "Creating frontend .env.local file..."
          cat > apps/frontend/.env.local << "EOF"
          ${{ secrets.ENV_FRONT }}
          EOF

          echo "✅ Environment files created successfully"

          # Always install all dependencies and do a fresh build
          yarn install --frozen-lockfile

          # Always build fresh to avoid manifest issues
          echo "Building applications on server..."

          # Build backend
          cd apps/backend
          npm run build
          cd ../..

          # Build frontend with clean slate
          cd apps/frontend
          rm -rf .next
          npm run build
          cd ../..

          echo "✅ Build completed successfully"

          # Set proper ownership (keep user access, add www-data group)
          sudo chown -R $USER:www-data /var/www/progressnet.io-app-new
          sudo chmod -R 755 /var/www/progressnet.io-app-new

      - name: Health check and deploy
        run: |
          # Setup PM2 log directory with proper permissions
          sudo mkdir -p /var/log/pm2
          sudo chown -R $USER:$USER /var/log/pm2
          sudo chmod 755 /var/log/pm2

          # Ensure PM2 home directory exists
          mkdir -p ~/.pm2

          # Atomic deployment switch (app directory only)
          sudo rm -rf /var/www/progressnet.io-app-old
          if [ -d "/var/www/progressnet.io-app" ]; then
            sudo mv /var/www/progressnet.io-app /var/www/progressnet.io-app-old
          fi
          sudo mv /var/www/progressnet.io-app-new /var/www/progressnet.io-app

          # Restart PM2 processes
          cd /var/www/progressnet.io-app

          # Stop existing processes gracefully
          pm2 stop progressnet-backend 2>/dev/null || true
          pm2 stop progressnet-frontend 2>/dev/null || true
          pm2 delete progressnet-backend 2>/dev/null || true
          pm2 delete progressnet-frontend 2>/dev/null || true

          # Start backend
          pm2 start ecosystem.config.js --only progressnet-backend

          # Start frontend
          pm2 start ecosystem.config.js --only progressnet-frontend


          # Save PM2 configuration
          pm2 save

          # Wait for services to start
          sleep 15

          # Health checks for all services
          echo "Performing health checks..."

          # Check backend
          if curl -f http://localhost:4005/api/health >/dev/null 2>&1; then
            echo "✅ Backend health check passed (port 4005)"
          else
            echo "⚠️  Backend health check failed - service may still be starting"
          fi

          # Check frontend
          if curl -f http://localhost:4004 >/dev/null 2>&1; then
            echo "✅ Frontend health check passed (port 4004)"
          else
            echo "⚠️  Frontend health check failed - service may still be starting"
          fi


          echo "Deployment completed - services should be running"
          echo "Backend: http://localhost:4005"
          echo "Frontend: http://localhost:4004"
          sudo rm -rf /var/www/progressnet.io-app-old

      - name: Rollback on failure
        if: failure()
        run: |
          echo "🔄 Rolling back deployment..."

          # Restore from previous version if available
          if [ -d "/var/www/progressnet.io-app-old" ]; then
            sudo rm -rf /var/www/progressnet.io-app
            sudo mv /var/www/progressnet.io-app-old /var/www/progressnet.io-app

            # Restart PM2 processes with old version
            cd /var/www/progressnet.io-app
            pm2 restart progressnet-backend
            pm2 restart progressnet-frontend
            echo "✅ Rollback completed using previous version"
          else
            echo "⚠️  No previous version available for rollback"

            # NOTE: Uploads are in persistent storage (/var/lib/fsa-uploads) and are not affected by deployment
            # They should already be intact, but verify they're accessible
            PERSISTENT_STORAGE="/var/lib/fsa-uploads"
            if [ -d "$PERSISTENT_STORAGE" ]; then
              UPLOAD_COUNT=$(sudo find "$PERSISTENT_STORAGE" -type f 2>/dev/null | wc -l)
              echo "✅ Persistent uploads storage intact with $UPLOAD_COUNT files"
            else
              echo "⚠️ Persistent storage not found - attempting restore from backup"
              LATEST_BACKUP=$(sudo find /var/backups -name "fsa-*" -type d | sort -r | head -n 1)
              if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP/uploads-only" ]; then
                echo "🔒 Restoring uploads from backup: $LATEST_BACKUP"
                sudo mkdir -p "$PERSISTENT_STORAGE"
                sudo cp -r $LATEST_BACKUP/uploads-only/* "$PERSISTENT_STORAGE/"
                sudo chown -R $USER:www-data "$PERSISTENT_STORAGE"
                sudo chmod -R 775 "$PERSISTENT_STORAGE"
                echo "✅ Uploads restored from backup to persistent storage"
              fi
            fi
          fi

          # Clean up failed deployment
          sudo rm -rf /var/www/progressnet.io-app-new

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed and rolled back"
          fi

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Remove build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - name: Cleanup artifacts
        run: |
          rm -rf apps/backend/dist/ apps/frontend/.next/ || true
