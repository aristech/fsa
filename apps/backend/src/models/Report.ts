import type { Document } from 'mongoose';
import type { ITenant } from './Tenant';
import type { IUser } from './User';
import type { IClient } from './Client';
import type { ITask } from './Task';
import type { IWorkOrder } from './WorkOrder';
import type { IMaterial } from './Material';

import mongoose, { Schema } from 'mongoose';

// ----------------------------------------------------------------------

export interface IReportAttachment {
  _id: string;
  filename: string;
  originalName: string;
  mimetype: string;
  size: number;
  url: string;
  uploadedAt: Date;
  uploadedBy: mongoose.Types.ObjectId | IUser;
}

export interface IReportTimeEntry {
  _id: string;
  description: string;
  startTime: Date;
  endTime: Date;
  duration: number; // in minutes
  taskId?: mongoose.Types.ObjectId | ITask;
  category: 'labor' | 'travel' | 'waiting' | 'equipment' | 'other';
}

export interface IReportMaterialUsage {
  _id: string;
  materialId: mongoose.Types.ObjectId | IMaterial;
  material: {
    name: string;
    sku: string;
    unit: string;
  };
  quantityUsed: number;
  unitCost: number;
  totalCost: number;
  notes?: string;
}

export interface IReportSignature {
  _id: string;
  type: 'technician' | 'customer' | 'supervisor' | 'inspector';
  signatureData: string; // Base64 encoded signature image
  signerName: string;
  signerTitle?: string;
  signerEmail?: string;
  signedAt: Date;
  ipAddress?: string;
}

export interface IReport extends Document {
  _id: string;
  tenantId: mongoose.Types.ObjectId | ITenant;

  // Basic Info
  title: string;
  type: 'daily' | 'weekly' | 'monthly' | 'incident' | 'maintenance' | 'inspection' | 'completion' | 'safety';
  status: 'draft' | 'submitted' | 'under_review' | 'approved' | 'rejected' | 'published';
  priority: 'low' | 'medium' | 'high' | 'urgent';

  // Relations
  createdBy: mongoose.Types.ObjectId | IUser;
  assignedTo: mongoose.Types.ObjectId | IUser;
  clientId?: mongoose.Types.ObjectId | IClient;
  workOrderId?: mongoose.Types.ObjectId | IWorkOrder;
  taskIds: (mongoose.Types.ObjectId | ITask)[];

  // Content
  description: string;
  location?: string;
  weather?: string;
  equipment?: string[];

  // Time Tracking
  reportDate: Date;
  startTime?: Date;
  endTime?: Date;
  totalHours?: number;
  timeEntries: IReportTimeEntry[];

  // Materials & Costs
  materialsUsed: IReportMaterialUsage[];
  totalMaterialCost: number;
  totalLaborCost: number;
  totalCost: number;

  // Documentation
  attachments: IReportAttachment[];
  signatures: IReportSignature[];
  photos: IReportAttachment[];

  // Quality & Safety
  qualityChecks: {
    item: string;
    status: 'pass' | 'fail' | 'n/a';
    notes?: string;
  }[];

  safetyIncidents: {
    type: string;
    description: string;
    severity: 'low' | 'medium' | 'high';
    actionTaken: string;
    reportedAt: Date;
  }[];

  // Client Interaction
  clientFeedback?: {
    rating: number; // 1-5
    comments?: string;
    submittedAt?: Date;
    submittedBy?: string;
  };

  clientApproval?: {
    approved: boolean;
    approvedAt?: Date;
    approvedBy?: string;
    comments?: string;
  };

  // System Fields
  submittedAt?: Date;
  approvedAt?: Date;
  approvedBy?: mongoose.Types.ObjectId | IUser;
  rejectedAt?: Date;
  rejectedBy?: mongoose.Types.ObjectId | IUser;
  rejectionReason?: string;

  // Workflow
  reviewers: (mongoose.Types.ObjectId | IUser)[];
  approvalRequired: boolean;
  clientVisible: boolean;

  // Template & Automation
  templateId?: string;
  autoGenerated: boolean;
  parentReportId?: mongoose.Types.ObjectId | IReport;

  // Metadata
  tags: string[];
  customFields: Map<string, any>;
  version: number;

  createdAt: Date;
  updatedAt: Date;
}

// ----------------------------------------------------------------------

const ReportAttachmentSchema: Schema = new Schema({
  filename: { type: String, required: true },
  originalName: { type: String, required: true },
  mimetype: { type: String, required: true },
  size: { type: Number, required: true },
  url: { type: String, required: true },
  uploadedAt: { type: Date, default: Date.now },
  uploadedBy: { type: Schema.Types.ObjectId, ref: 'User', required: true },
});

const ReportTimeEntrySchema: Schema = new Schema({
  description: { type: String, required: true },
  startTime: { type: Date, required: true },
  endTime: { type: Date, required: true },
  duration: { type: Number, required: true }, // calculated in minutes
  taskId: { type: Schema.Types.ObjectId, ref: 'Task' },
  category: {
    type: String,
    enum: ['labor', 'travel', 'waiting', 'equipment', 'other'],
    default: 'labor'
  },
});

const ReportMaterialUsageSchema: Schema = new Schema({
  materialId: { type: Schema.Types.ObjectId, ref: 'Material', required: true },
  material: {
    name: { type: String, required: true },
    sku: { type: String },
    unit: { type: String, required: true },
  },
  quantityUsed: { type: Number, required: true, min: 0 },
  unitCost: { type: Number, required: true, min: 0 },
  totalCost: { type: Number, required: true, min: 0 },
  notes: { type: String },
});

const ReportSignatureSchema: Schema = new Schema({
  type: {
    type: String,
    enum: ['technician', 'customer', 'supervisor', 'inspector'],
    required: true
  },
  signatureData: { type: String, required: true }, // Base64 encoded
  signerName: { type: String, required: true },
  signerTitle: { type: String },
  signerEmail: { type: String },
  signedAt: { type: Date, default: Date.now },
  ipAddress: { type: String },
});

const QualityCheckSchema: Schema = new Schema({
  item: { type: String, required: true },
  status: { type: String, enum: ['pass', 'fail', 'n/a'], required: true },
  notes: { type: String },
}, { _id: true });

const SafetyIncidentSchema: Schema = new Schema({
  type: { type: String, required: true },
  description: { type: String, required: true },
  severity: { type: String, enum: ['low', 'medium', 'high'], required: true },
  actionTaken: { type: String, required: true },
  reportedAt: { type: Date, default: Date.now },
}, { _id: true });

const ReportSchema: Schema = new Schema(
  {
    tenantId: {
      type: Schema.Types.ObjectId,
      ref: 'Tenant',
      required: true,
      index: true,
    },

    // Basic Info
    title: {
      type: String,
      required: [true, 'Report title is required'],
      trim: true,
      index: true,
    },
    type: {
      type: String,
      enum: ['daily', 'weekly', 'monthly', 'incident', 'maintenance', 'inspection', 'completion', 'safety'],
      required: true,
      index: true,
    },
    status: {
      type: String,
      enum: ['draft', 'submitted', 'under_review', 'approved', 'rejected', 'published'],
      default: 'draft',
      index: true,
    },
    priority: {
      type: String,
      enum: ['low', 'medium', 'high', 'urgent'],
      default: 'medium',
      index: true,
    },

    // Relations
    createdBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true,
      index: true,
    },
    assignedTo: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      index: true,
    },
    clientId: {
      type: Schema.Types.ObjectId,
      ref: 'Client',
      index: true,
    },
    workOrderId: {
      type: Schema.Types.ObjectId,
      ref: 'WorkOrder',
      index: true,
    },
    taskIds: [{
      type: Schema.Types.ObjectId,
      ref: 'Task',
    }],

    // Content
    description: {
      type: String,
      required: [true, 'Report description is required'],
    },
    location: { type: String, trim: true },
    weather: { type: String, trim: true },
    equipment: [{ type: String, trim: true }],

    // Time Tracking
    reportDate: { type: Date, required: true, index: true },
    startTime: { type: Date },
    endTime: { type: Date },
    totalHours: { type: Number, min: 0 },
    timeEntries: [ReportTimeEntrySchema],

    // Materials & Costs
    materialsUsed: [ReportMaterialUsageSchema],
    totalMaterialCost: { type: Number, default: 0, min: 0 },
    totalLaborCost: { type: Number, default: 0, min: 0 },
    totalCost: { type: Number, default: 0, min: 0 },

    // Documentation
    attachments: [ReportAttachmentSchema],
    signatures: [ReportSignatureSchema],
    photos: [ReportAttachmentSchema],

    // Quality & Safety
    qualityChecks: [QualityCheckSchema],
    safetyIncidents: [SafetyIncidentSchema],

    // Client Interaction
    clientFeedback: {
      rating: { type: Number, min: 1, max: 5 },
      comments: { type: String },
      submittedAt: { type: Date },
      submittedBy: { type: String },
    },

    clientApproval: {
      approved: { type: Boolean },
      approvedAt: { type: Date },
      approvedBy: { type: String },
      comments: { type: String },
    },

    // System Fields
    submittedAt: { type: Date },
    approvedAt: { type: Date },
    approvedBy: { type: Schema.Types.ObjectId, ref: 'User' },
    rejectedAt: { type: Date },
    rejectedBy: { type: Schema.Types.ObjectId, ref: 'User' },
    rejectionReason: { type: String },

    // Workflow
    reviewers: [{ type: Schema.Types.ObjectId, ref: 'User' }],
    approvalRequired: { type: Boolean, default: true },
    clientVisible: { type: Boolean, default: true },

    // Template & Automation
    templateId: { type: String },
    autoGenerated: { type: Boolean, default: false },
    parentReportId: { type: Schema.Types.ObjectId, ref: 'Report' },

    // Metadata
    tags: [{ type: String, trim: true }],
    customFields: { type: Map, of: Schema.Types.Mixed, default: new Map() },
    version: { type: Number, default: 1 },
  },
  {
    timestamps: true,
  }
);

// ----------------------------------------------------------------------

// Compound indexes for better performance
ReportSchema.index({ tenantId: 1, createdBy: 1 });
ReportSchema.index({ tenantId: 1, clientId: 1 });
ReportSchema.index({ tenantId: 1, workOrderId: 1 });
ReportSchema.index({ tenantId: 1, status: 1 });
ReportSchema.index({ tenantId: 1, type: 1 });
ReportSchema.index({ tenantId: 1, reportDate: 1 });
ReportSchema.index({ createdAt: 1 });
ReportSchema.index({ reportDate: 1, createdAt: 1 });

// Text index for search functionality
ReportSchema.index({
  title: 'text',
  description: 'text',
  location: 'text',
  tags: 'text',
});

// Pre-save middleware to calculate costs
ReportSchema.pre('save', function (this: IReport) {
  // Calculate total material cost
  this.totalMaterialCost = this.materialsUsed.reduce((sum, material) => sum + material.totalCost, 0);

  // Calculate total hours from time entries
  this.totalHours = this.timeEntries.reduce((sum, entry) => sum + (entry.duration / 60), 0);

  // Calculate total cost (materials + labor + other costs)
  this.totalCost = this.totalMaterialCost + this.totalLaborCost;

  // Update version on modification
  if (this.isModified() && !this.isNew) {
    this.version += 1;
  }
});

// Virtual for formatted total cost
ReportSchema.virtual('formattedTotalCost').get(function (this: IReport) {
  return `$${this.totalCost.toFixed(2)}`;
});

// Virtual for report age
ReportSchema.virtual('ageInDays').get(function (this: IReport) {
  const now = new Date();
  const created = new Date(this.createdAt);
  return Math.floor((now.getTime() - created.getTime()) / (1000 * 60 * 60 * 24));
});

export const Report = mongoose.models.Report || mongoose.model<IReport>('Report', ReportSchema);